# Handle module instantiation - make sure signals at both module levels are handled
# correctly if they are passed between the modules.
# So implement do_module_instantiation in VeriModule.py
# May need to handle proper lvalue = <expr> for complicated lvalues such as {a[4:1], b,c[31:0]} = <expr>

# Create simple 'assert reg==value' for auto testing.

# Clean up tests to print just '.' if pass. Use exceptions to return expected errors.

# Timescales need to be tracked based on textual order and associated with
# each module (I think....)

# Put decent comments that can be auto-extracted to generate web pages.
# Figure out how to generate such web pages (ask Leo?)

# Handle $finish

# Fix up pyParsing to do better error handling

# Handle Expressions as a separate routine - will PyParsing let me extract
# the expression and then pass it to a special expression parser?

# Handle functions
# Handle tasks

# Handle memories

# Handle @(sensitivity list)
# Handle @* dependency list (auto extract sensitivity list)

Done
====

 handle signal dependency: if r changes then b changes ( e.g. if wire b = r + 1 )

 Handle delayed statement.  e.g. #10 r = 1
   - this needs concept of current timescale.  (relative to fs?)
   - so process `timescale commands?

